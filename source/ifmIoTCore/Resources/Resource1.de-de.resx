<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddAncestorElementNotAllowed" xml:space="preserve">
    <value>Hinzufügen von Element '{0}' zu Element '{1}' ist nicht erlaubt, da es bereits in der Baumhierarchie von Element '{1}' vorhanden ist</value>
  </data>
  <data name="AddElementToLinkNotAllowed" xml:space="preserve">
    <value>Hinzufügen eines Elements zu einem Link-Element ist nicht erlaubt</value>
  </data>
  <data name="AddLinkNotAllowed" xml:space="preserve">
    <value>Der Link zwischen '{0}' und '{1}' würde eine Kreisabhängigkeit verursachen und ist daher nicht erlaubt</value>
  </data>
  <data name="ArgumentNullOrEmpty" xml:space="preserve">
    <value>Das Argument mit dem Namen '{0}' darf nicht null oder leer sein</value>
  </data>
  <data name="ClientFactoryNotFound" xml:space="preserve">
    <value>Die Client-Factory für das Protokoll '{0}' wurde nicht gefunden</value>
  </data>
  <data name="ElementAlreadyExists" xml:space="preserve">
    <value>Das Element '{0}' existiert bereits in Element '{1}'</value>
  </data>
  <data name="ElementAlreadyHasParent" xml:space="preserve">
    <value>Das Element '{0}' hat bereits das Elternelement '{1}'</value>
  </data>
  <data name="ElementLocked" xml:space="preserve">
    <value>Das Element '{0}' ist gerade gesperrt</value>
  </data>
  <data name="ElementManagerLocked" xml:space="preserve">
    <value>Der Elementmanager ist gerade gesperrt</value>
  </data>
  <data name="ElementNotChild" xml:space="preserve">
    <value>Das Element '{0}' ist nicht das Kindelement von Element '{1}'</value>
  </data>
  <data name="ElementNotFound" xml:space="preserve">
    <value>Das Element mit Adresse '{0}' wurde nicht gefunden</value>
  </data>
  <data name="ElementNotLinked" xml:space="preserve">
    <value>Das Element '{0}' ist nicht verlinkt von Element '{1}'</value>
  </data>
  <data name="ElementNotService" xml:space="preserve">
    <value>Das Element mit Adresse '{0}' ist kein Service</value>
  </data>
  <data name="InvalidArgument" xml:space="preserve">
    <value>Das Argument '{0}' ist ungültig</value>
  </data>
  <data name="InvalidArgumentType" xml:space="preserve">
    <value>Der Argumenttyp '{0}' ist nicht gültig. Der benötigte Typ ist '{1}'</value>
  </data>
  <data name="InvalidDeviceName" xml:space="preserve">
    <value>Der Gerätename in Adresse '{0}' ist ungültig</value>
  </data>
  <data name="InvalidIdentifier" xml:space="preserve">
    <value>Der Identifier '{0}' ist ungültig</value>
  </data>
  <data name="InvalidMessageAddress" xml:space="preserve">
    <value>Das 'adr' Feld einer Nachricht darf nicht leer oder null sein</value>
  </data>
  <data name="InvalidMessageCode" xml:space="preserve">
    <value>Der Nachrichtencode '{0}' ist ungültig</value>
  </data>
  <data name="InvalidName" xml:space="preserve">
    <value>Der Name '{0}' ist ungültig</value>
  </data>
  <data name="InvalidResponse" xml:space="preserve">
    <value>Der entfernte Service auf {'0}' gab eine ungültige Antwort </value>
  </data>
  <data name="InvalidUri" xml:space="preserve">
    <value>Die Uri '{0}' ist ungültig</value>
  </data>
  <data name="IoTCoreStarted" xml:space="preserve">
    <value>Der IoTCore ist gestartet. Version='{0}'</value>
  </data>
  <data name="IoTCoreStopped" xml:space="preserve">
    <value>Der IoTCore ist gestoppt</value>
  </data>
  <data name="LinkAlreadyExists" xml:space="preserve">
    <value>Der Link zwischen '{0}' und '{1}' existiert bereits</value>
  </data>
  <data name="LinksNotModifiable" xml:space="preserve">
    <value>Links können nicht verändert werden</value>
  </data>
  <data name="NameAlreadyUsed" xml:space="preserve">
    <value>Der Name '{0}' wird bereits verwendet</value>
  </data>
  <data name="NameNotFound" xml:space="preserve">
    <value>Der Name '{0}' wurde nicht gefunden</value>
  </data>
  <data name="ParameterNotSpecified" xml:space="preserve">
    <value>The parameter '{0}' is not specified</value>
  </data>
  <data name="RootElementAlreadyExists" xml:space="preserve">
    <value>Das Wurzelelement exisiert bereits</value>
  </data>
  <data name="SendEventFailed" xml:space="preserve">
    <value>Senden eines Ereignisses an '{0}' ist mit Fehler '{1}' fehlgeschlagen</value>
  </data>
  <data name="SendRequestFailed" xml:space="preserve">
    <value>Senden einer Anfrage an '{0}' ist mit Fehler '{1}' fehlgeschlagen</value>
  </data>
  <data name="ServiceDataEmpty" xml:space="preserve">
    <value>Die Daten für Service '{0}' sind leer. Bitte überprüfen Sie das 'data' Feld in Ihrem Aufruf</value>
  </data>
  <data name="ServiceExecutionFailed" xml:space="preserve">
    <value>Service '{0}' ist fehlgeschlagen. Nachricht: '{1}'</value>
  </data>
  <data name="ServiceNotImplemented" xml:space="preserve">
    <value>Der Service '{0}' ist nicht implementiert</value>
  </data>
  <data name="SubscriptionDataMissing" xml:space="preserve">
    <value>Die Daten für die subscription wurde nicht angegeben</value>
  </data>
  <data name="SubscriptionNotFound" xml:space="preserve">
    <value>Die subscription mit der Kennung '{0}'wurde nicht gefunden</value>
  </data>
  <data name="SubscriptionSetToLifeTimeButNoPersistenceManagerRegistered" xml:space="preserve">
    <value>Die subscription wurde mit der Lebenszeit "Lifetime" angegeben. Es ist jedoch kein persistence manager registriert. Bitte registrieren sie am iotcore einen persistence manager.</value>
  </data>
</root>